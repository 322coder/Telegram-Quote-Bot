import logging
import random
import sqlite3
from pathlib import Path

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_TOKEN"
DB_FILE = "quotes.db"
ADMIN_IDS = [123456789]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

class QuoteDatabase:
    def __init__(self, db_file: str):
        self.db_file = db_file
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS quotes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    text TEXT NOT NULL,
                    author TEXT NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()

    def get_random_quote(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É"""
        with sqlite3.connect(self.db_file) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM quotes ORDER BY RANDOM() LIMIT 1")
            row = cursor.fetchone()
            return dict(row) if row else {"text": "–¶–∏—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", "author": "–ë–æ—Ç"}

    def add_quote(self, text: str, author: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä") -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É"""
        if not text.strip(): return False
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO quotes (text, author) VALUES (?, ?)", (text.strip(), author.strip()))
            conn.commit()
            return cursor.rowcount > 0

    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–∏—Ç–∞—Ç–∞–º"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) as total FROM quotes")
            total = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(DISTINCT author) as authors FROM quotes")
            authors = cursor.fetchone()[0]
            return {"total": total, "authors": authors}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = QuoteDatabase(DB_FILE)

def format_quote(quote: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—É"""
    return f"üìú *{quote['text']}*\n\n‚Äî _{quote['author']}_"

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¶–∏—Ç–∞—Ç–Ω–∏–∫!* ‚ú®\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –≤ –º—É–¥—Ä—ã—Ö —Å–ª–æ–≤–∞—Ö.",
        reply_markup=create_main_keyboard(),
        parse_mode='Markdown'
    )

async def random_quote_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quote = db.get_random_quote()
    await update.message.reply_text(format_quote(quote), parse_mode='Markdown', reply_markup=create_main_keyboard())

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = db.get_stats()
    stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n–¶–∏—Ç–∞—Ç: {stats['total']}\n–ê–≤—Ç–æ—Ä–æ–≤: {stats['authors']}"
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def add_quote_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addquote \"–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã\" –ê–≤—Ç–æ—Ä")
        return
    
    text = " ".join(context.args)
    if '"' in text:
        parts = text.split('"')
        quote_text = parts[1].strip()
        author = " ".join(parts[2:]).strip() if len(parts) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
    else:
        quote_text, author = text, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"

    if db.add_quote(quote_text, author):
        await update.message.reply_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "random_quote":
        quote = db.get_random_quote()
        await query.edit_message_text(format_quote(quote), parse_mode='Markdown', reply_markup=create_main_keyboard())
    elif data == "stats":
        stats = db.get_stats()
        stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n–¶–∏—Ç–∞—Ç: {stats['total']}\n–ê–≤—Ç–æ—Ä–æ–≤: {stats['authors']}"
        await query.edit_message_text(stats_text, parse_mode='Markdown', reply_markup=create_main_keyboard())

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quote", random_quote_cmd))
    application.add_handler(CommandHandler("stats", stats_cmd))
    application.add_handler(CommandHandler("addquote", add_quote_cmd))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":

    main()
